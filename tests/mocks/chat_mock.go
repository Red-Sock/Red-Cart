package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	mm_interfaces "github.com/Red-Sock/go_tg/interfaces"
	"github.com/Red-Sock/go_tg/model"
	"github.com/gojuno/minimock/v3"
)

// ChatMock implements interfaces.Chat
type ChatMock struct {
	t minimock.Tester

	funcGetInput          func(ctx context.Context) (mp1 *model.MessageIn, err error)
	inspectFuncGetInput   func(ctx context.Context)
	afterGetInputCounter  uint64
	beforeGetInputCounter uint64
	GetInputMock          mChatMockGetInput

	funcSendMessage          func(out mm_interfaces.MessageOut)
	inspectFuncSendMessage   func(out mm_interfaces.MessageOut)
	afterSendMessageCounter  uint64
	beforeSendMessageCounter uint64
	SendMessageMock          mChatMockSendMessage
}

// NewChatMock returns a mock for interfaces.Chat
func NewChatMock(t minimock.Tester) *ChatMock {
	m := &ChatMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetInputMock = mChatMockGetInput{mock: m}
	m.GetInputMock.callArgs = []*ChatMockGetInputParams{}

	m.SendMessageMock = mChatMockSendMessage{mock: m}
	m.SendMessageMock.callArgs = []*ChatMockSendMessageParams{}

	return m
}

type mChatMockGetInput struct {
	mock               *ChatMock
	defaultExpectation *ChatMockGetInputExpectation
	expectations       []*ChatMockGetInputExpectation

	callArgs []*ChatMockGetInputParams
	mutex    sync.RWMutex
}

// ChatMockGetInputExpectation specifies expectation struct of the Chat.GetInput
type ChatMockGetInputExpectation struct {
	mock    *ChatMock
	params  *ChatMockGetInputParams
	results *ChatMockGetInputResults
	Counter uint64
}

// ChatMockGetInputParams contains parameters of the Chat.GetInput
type ChatMockGetInputParams struct {
	ctx context.Context
}

// ChatMockGetInputResults contains results of the Chat.GetInput
type ChatMockGetInputResults struct {
	mp1 *model.MessageIn
	err error
}

// Expect sets up expected params for Chat.GetInput
func (mmGetInput *mChatMockGetInput) Expect(ctx context.Context) *mChatMockGetInput {
	if mmGetInput.mock.funcGetInput != nil {
		mmGetInput.mock.t.Fatalf("ChatMock.GetInput mock is already set by Set")
	}

	if mmGetInput.defaultExpectation == nil {
		mmGetInput.defaultExpectation = &ChatMockGetInputExpectation{}
	}

	mmGetInput.defaultExpectation.params = &ChatMockGetInputParams{ctx}
	for _, e := range mmGetInput.expectations {
		if minimock.Equal(e.params, mmGetInput.defaultExpectation.params) {
			mmGetInput.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetInput.defaultExpectation.params)
		}
	}

	return mmGetInput
}

// Inspect accepts an inspector function that has same arguments as the Chat.GetInput
func (mmGetInput *mChatMockGetInput) Inspect(f func(ctx context.Context)) *mChatMockGetInput {
	if mmGetInput.mock.inspectFuncGetInput != nil {
		mmGetInput.mock.t.Fatalf("Inspect function is already set for ChatMock.GetInput")
	}

	mmGetInput.mock.inspectFuncGetInput = f

	return mmGetInput
}

// Return sets up results that will be returned by Chat.GetInput
func (mmGetInput *mChatMockGetInput) Return(mp1 *model.MessageIn, err error) *ChatMock {
	if mmGetInput.mock.funcGetInput != nil {
		mmGetInput.mock.t.Fatalf("ChatMock.GetInput mock is already set by Set")
	}

	if mmGetInput.defaultExpectation == nil {
		mmGetInput.defaultExpectation = &ChatMockGetInputExpectation{mock: mmGetInput.mock}
	}
	mmGetInput.defaultExpectation.results = &ChatMockGetInputResults{mp1, err}
	return mmGetInput.mock
}

// Set uses given function f to mock the Chat.GetInput method
func (mmGetInput *mChatMockGetInput) Set(f func(ctx context.Context) (mp1 *model.MessageIn, err error)) *ChatMock {
	if mmGetInput.defaultExpectation != nil {
		mmGetInput.mock.t.Fatalf("Default expectation is already set for the Chat.GetInput method")
	}

	if len(mmGetInput.expectations) > 0 {
		mmGetInput.mock.t.Fatalf("Some expectations are already set for the Chat.GetInput method")
	}

	mmGetInput.mock.funcGetInput = f
	return mmGetInput.mock
}

// When sets expectation for the Chat.GetInput which will trigger the result defined by the following
// Then helper
func (mmGetInput *mChatMockGetInput) When(ctx context.Context) *ChatMockGetInputExpectation {
	if mmGetInput.mock.funcGetInput != nil {
		mmGetInput.mock.t.Fatalf("ChatMock.GetInput mock is already set by Set")
	}

	expectation := &ChatMockGetInputExpectation{
		mock:   mmGetInput.mock,
		params: &ChatMockGetInputParams{ctx},
	}
	mmGetInput.expectations = append(mmGetInput.expectations, expectation)
	return expectation
}

// Then sets up Chat.GetInput return parameters for the expectation previously defined by the When method
func (e *ChatMockGetInputExpectation) Then(mp1 *model.MessageIn, err error) *ChatMock {
	e.results = &ChatMockGetInputResults{mp1, err}
	return e.mock
}

// GetInput implements interfaces.Chat
func (mmGetInput *ChatMock) GetInput(ctx context.Context) (mp1 *model.MessageIn, err error) {
	mm_atomic.AddUint64(&mmGetInput.beforeGetInputCounter, 1)
	defer mm_atomic.AddUint64(&mmGetInput.afterGetInputCounter, 1)

	if mmGetInput.inspectFuncGetInput != nil {
		mmGetInput.inspectFuncGetInput(ctx)
	}

	mm_params := &ChatMockGetInputParams{ctx}

	// Record call args
	mmGetInput.GetInputMock.mutex.Lock()
	mmGetInput.GetInputMock.callArgs = append(mmGetInput.GetInputMock.callArgs, mm_params)
	mmGetInput.GetInputMock.mutex.Unlock()

	for _, e := range mmGetInput.GetInputMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.mp1, e.results.err
		}
	}

	if mmGetInput.GetInputMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetInput.GetInputMock.defaultExpectation.Counter, 1)
		mm_want := mmGetInput.GetInputMock.defaultExpectation.params
		mm_got := ChatMockGetInputParams{ctx}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetInput.t.Errorf("ChatMock.GetInput got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetInput.GetInputMock.defaultExpectation.results
		if mm_results == nil {
			mmGetInput.t.Fatal("No results are set for the ChatMock.GetInput")
		}
		return (*mm_results).mp1, (*mm_results).err
	}
	if mmGetInput.funcGetInput != nil {
		return mmGetInput.funcGetInput(ctx)
	}
	mmGetInput.t.Fatalf("Unexpected call to ChatMock.GetInput. %v", ctx)
	return
}

// GetInputAfterCounter returns a count of finished ChatMock.GetInput invocations
func (mmGetInput *ChatMock) GetInputAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetInput.afterGetInputCounter)
}

// GetInputBeforeCounter returns a count of ChatMock.GetInput invocations
func (mmGetInput *ChatMock) GetInputBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetInput.beforeGetInputCounter)
}

// Calls returns a list of arguments used in each call to ChatMock.GetInput.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetInput *mChatMockGetInput) Calls() []*ChatMockGetInputParams {
	mmGetInput.mutex.RLock()

	argCopy := make([]*ChatMockGetInputParams, len(mmGetInput.callArgs))
	copy(argCopy, mmGetInput.callArgs)

	mmGetInput.mutex.RUnlock()

	return argCopy
}

// MinimockGetInputDone returns true if the count of the GetInput invocations corresponds
// the number of defined expectations
func (m *ChatMock) MinimockGetInputDone() bool {
	for _, e := range m.GetInputMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetInputMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetInputCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetInput != nil && mm_atomic.LoadUint64(&m.afterGetInputCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetInputInspect logs each unmet expectation
func (m *ChatMock) MinimockGetInputInspect() {
	for _, e := range m.GetInputMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatMock.GetInput with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetInputMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetInputCounter) < 1 {
		if m.GetInputMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ChatMock.GetInput")
		} else {
			m.t.Errorf("Expected call to ChatMock.GetInput with params: %#v", *m.GetInputMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetInput != nil && mm_atomic.LoadUint64(&m.afterGetInputCounter) < 1 {
		m.t.Error("Expected call to ChatMock.GetInput")
	}
}

type mChatMockSendMessage struct {
	mock               *ChatMock
	defaultExpectation *ChatMockSendMessageExpectation
	expectations       []*ChatMockSendMessageExpectation

	callArgs []*ChatMockSendMessageParams
	mutex    sync.RWMutex
}

// ChatMockSendMessageExpectation specifies expectation struct of the Chat.SendMessage
type ChatMockSendMessageExpectation struct {
	mock   *ChatMock
	params *ChatMockSendMessageParams

	Counter uint64
}

// ChatMockSendMessageParams contains parameters of the Chat.SendMessage
type ChatMockSendMessageParams struct {
	out mm_interfaces.MessageOut
}

// Expect sets up expected params for Chat.SendMessage
func (mmSendMessage *mChatMockSendMessage) Expect(out mm_interfaces.MessageOut) *mChatMockSendMessage {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("ChatMock.SendMessage mock is already set by Set")
	}

	if mmSendMessage.defaultExpectation == nil {
		mmSendMessage.defaultExpectation = &ChatMockSendMessageExpectation{}
	}

	mmSendMessage.defaultExpectation.params = &ChatMockSendMessageParams{out}
	for _, e := range mmSendMessage.expectations {
		if minimock.Equal(e.params, mmSendMessage.defaultExpectation.params) {
			mmSendMessage.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSendMessage.defaultExpectation.params)
		}
	}

	return mmSendMessage
}

// Inspect accepts an inspector function that has same arguments as the Chat.SendMessage
func (mmSendMessage *mChatMockSendMessage) Inspect(f func(out mm_interfaces.MessageOut)) *mChatMockSendMessage {
	if mmSendMessage.mock.inspectFuncSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("Inspect function is already set for ChatMock.SendMessage")
	}

	mmSendMessage.mock.inspectFuncSendMessage = f

	return mmSendMessage
}

// Return sets up results that will be returned by Chat.SendMessage
func (mmSendMessage *mChatMockSendMessage) Return() *ChatMock {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("ChatMock.SendMessage mock is already set by Set")
	}

	if mmSendMessage.defaultExpectation == nil {
		mmSendMessage.defaultExpectation = &ChatMockSendMessageExpectation{mock: mmSendMessage.mock}
	}

	return mmSendMessage.mock
}

// Set uses given function f to mock the Chat.SendMessage method
func (mmSendMessage *mChatMockSendMessage) Set(f func(out mm_interfaces.MessageOut)) *ChatMock {
	if mmSendMessage.defaultExpectation != nil {
		mmSendMessage.mock.t.Fatalf("Default expectation is already set for the Chat.SendMessage method")
	}

	if len(mmSendMessage.expectations) > 0 {
		mmSendMessage.mock.t.Fatalf("Some expectations are already set for the Chat.SendMessage method")
	}

	mmSendMessage.mock.funcSendMessage = f
	return mmSendMessage.mock
}

// SendMessage implements interfaces.Chat
func (mmSendMessage *ChatMock) SendMessage(out mm_interfaces.MessageOut) {
	mm_atomic.AddUint64(&mmSendMessage.beforeSendMessageCounter, 1)
	defer mm_atomic.AddUint64(&mmSendMessage.afterSendMessageCounter, 1)

	if mmSendMessage.inspectFuncSendMessage != nil {
		mmSendMessage.inspectFuncSendMessage(out)
	}

	mm_params := &ChatMockSendMessageParams{out}

	// Record call args
	mmSendMessage.SendMessageMock.mutex.Lock()
	mmSendMessage.SendMessageMock.callArgs = append(mmSendMessage.SendMessageMock.callArgs, mm_params)
	mmSendMessage.SendMessageMock.mutex.Unlock()

	for _, e := range mmSendMessage.SendMessageMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmSendMessage.SendMessageMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSendMessage.SendMessageMock.defaultExpectation.Counter, 1)
		mm_want := mmSendMessage.SendMessageMock.defaultExpectation.params
		mm_got := ChatMockSendMessageParams{out}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSendMessage.t.Errorf("ChatMock.SendMessage got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		return

	}
	if mmSendMessage.funcSendMessage != nil {
		mmSendMessage.funcSendMessage(out)
		return
	}
	mmSendMessage.t.Fatalf("Unexpected call to ChatMock.SendMessage. %v", out)

}

// SendMessageAfterCounter returns a count of finished ChatMock.SendMessage invocations
func (mmSendMessage *ChatMock) SendMessageAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendMessage.afterSendMessageCounter)
}

// SendMessageBeforeCounter returns a count of ChatMock.SendMessage invocations
func (mmSendMessage *ChatMock) SendMessageBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendMessage.beforeSendMessageCounter)
}

// Calls returns a list of arguments used in each call to ChatMock.SendMessage.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSendMessage *mChatMockSendMessage) Calls() []*ChatMockSendMessageParams {
	mmSendMessage.mutex.RLock()

	argCopy := make([]*ChatMockSendMessageParams, len(mmSendMessage.callArgs))
	copy(argCopy, mmSendMessage.callArgs)

	mmSendMessage.mutex.RUnlock()

	return argCopy
}

// MinimockSendMessageDone returns true if the count of the SendMessage invocations corresponds
// the number of defined expectations
func (m *ChatMock) MinimockSendMessageDone() bool {
	for _, e := range m.SendMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SendMessageMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSendMessageCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSendMessage != nil && mm_atomic.LoadUint64(&m.afterSendMessageCounter) < 1 {
		return false
	}
	return true
}

// MinimockSendMessageInspect logs each unmet expectation
func (m *ChatMock) MinimockSendMessageInspect() {
	for _, e := range m.SendMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatMock.SendMessage with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SendMessageMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSendMessageCounter) < 1 {
		if m.SendMessageMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ChatMock.SendMessage")
		} else {
			m.t.Errorf("Expected call to ChatMock.SendMessage with params: %#v", *m.SendMessageMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSendMessage != nil && mm_atomic.LoadUint64(&m.afterSendMessageCounter) < 1 {
		m.t.Error("Expected call to ChatMock.SendMessage")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ChatMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetInputInspect()

		m.MinimockSendMessageInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ChatMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ChatMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetInputDone() &&
		m.MinimockSendMessageDone()
}
